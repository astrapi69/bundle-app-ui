package de.alpharogroup.bundle.app.spring;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import de.alpharogroup.collections.list.ListExtensions;
import de.alpharogroup.db.resource.bundles.entities.Countries;
import de.alpharogroup.db.resource.bundles.entities.LanguageLocales;
import de.alpharogroup.db.resource.bundles.entities.Languages;
import de.alpharogroup.resourcebundle.locale.LocaleExtensions;
import de.alpharogroup.resourcebundle.locale.LocaleResolver;
import lombok.experimental.UtilityClass;

/**
 * A factory for creating DataObject objects.
 */
@UtilityClass
public class DataObjectFactory
{

	/**
	 * Factory method for create an initial {@link List} of {@link Countries} objects.
	 *
	 * @return the created {@link List} with the {@link Countries} objects.
	 */
	public static List<Countries> newCountries()
	{
		final Map<String, String> countriesMap = new LinkedHashMap<>();
		countriesMap.put("United Arab Emirates", "AE");
		countriesMap.put("Antigua and Barbuda", "AG");
		countriesMap.put("Anguilla", "AI");
		countriesMap.put("Albania", "AL");
		countriesMap.put("Armenia", "AM");
		countriesMap.put("Angola", "AO");
		countriesMap.put("Antarctica", "AQ");
		countriesMap.put("AntarcticaAmerican Samoa", "AS");
		countriesMap.put("AntarcticaAmerican Austria", "AT");
		countriesMap.put("Australia", "AU");
		countriesMap.put("AustraliaAruba", "AW");
		countriesMap.put("AustraliaArubaAzerbaijan", "AZ");
		countriesMap.put("Bosnia and Herzegovina", "BA");
		countriesMap.put("Bosnia Barbados", "BB");
		countriesMap.put("Bosnia Bangladesh", "BD");
		countriesMap.put("Burkina Faso", "BF");
		countriesMap.put("Burkina Bulgaria", "BG");
		countriesMap.put("Bahrain", "BH");
		countriesMap.put("Burundi", "BI");
		countriesMap.put("Benin", "BJ");
		countriesMap.put("Bermuda", "BM");
		countriesMap.put("Brunei Darussalam", "BN");
		countriesMap.put("Bolivia", "BO");
		countriesMap.put("Brazil", "BR");
		countriesMap.put("Bahamas", "BS");
		countriesMap.put("Bhutan", "BT");
		countriesMap.put("Bouvet Island", "BV");
		countriesMap.put("Belarus", "BY");
		countriesMap.put("Belize", "BZ");
		countriesMap.put("Canada", "CA");
		countriesMap.put("Cocos (Keeling) Islands", "CC");
		countriesMap.put("Central African Republic,", "CF");
		countriesMap.put("Congo", "CG");
		countriesMap.put("Switzerland", "CH");
		countriesMap.put("Cook Islands", "CK");
		countriesMap.put("Chile", "CL");
		countriesMap.put("Cameroon", "CM");
		countriesMap.put("China", "CN");
		countriesMap.put("Colombia", "CO");
		countriesMap.put("Costa Rica", "CR");
		countriesMap.put("Cuba", "CU");
		countriesMap.put("Christmas Island", "CX");
		countriesMap.put("Cyprus", "CY");
		countriesMap.put("Czechia", "CZ");
		countriesMap.put("Germany", "DE");
		countriesMap.put("Djibouti", "DJ");
		countriesMap.put("Denmark", "DK");
		countriesMap.put("Dominica", "DM");
		countriesMap.put("Algeria", "DZ");
		countriesMap.put("Ecuador", "EC");
		countriesMap.put("Estonia", "EE");
		countriesMap.put("Egypt", "EG");
		countriesMap.put("Western Sahara", "EH");
		countriesMap.put("Eritrea", "ER");
		countriesMap.put("Spain", "ES");
		countriesMap.put("Ethiopia", "ET");
		countriesMap.put("Finland", "FI");
		countriesMap.put("Falkland Islands (Malvinas)", "FK");
		countriesMap.put("Faroe Islands", "FO");
		countriesMap.put("France", "FR");
		countriesMap.put("Gabon", "GA");
		countriesMap.put("United Kingdom", "GB");
		countriesMap.put("Grenada", "GD");
		countriesMap.put("Georgia", "GE");
		countriesMap.put("French Guiana", "GF");
		countriesMap.put("Ghana", "GH");
		countriesMap.put("Gibraltar", "GI");
		countriesMap.put("Greenland", "GL");
		countriesMap.put("Gambia", "GM");
		countriesMap.put("Guinea", "GN");
		countriesMap.put("Equatorial Guinea", "GQ");
		countriesMap.put("Greece", "GR");
		countriesMap.put("Guatemala", "GT");
		countriesMap.put("Guam", "GU");
		countriesMap.put("Guyana", "GY");
		countriesMap.put("Hong Kong", "HK");
		countriesMap.put("Honduras", "HN");
		countriesMap.put("Croatia", "HR");
		countriesMap.put("Haiti", "HT");
		countriesMap.put("Hungary", "HU");
		countriesMap.put("Indonesia", "ID");
		countriesMap.put("Ireland", "IE");
		countriesMap.put("Israel", "IL");
		countriesMap.put("Isle of Man", "IM");
		countriesMap.put("India", "IN");
		countriesMap.put("Iraq", "IQ");
		countriesMap.put("Iran", "IR");
		countriesMap.put("Iceland", "IS");
		countriesMap.put("Italy", "IT");
		countriesMap.put("Jersey", "JE");
		countriesMap.put("Jamaica", "JM");
		countriesMap.put("Jordan", "JO");
		countriesMap.put("Japan", "JP");
		countriesMap.put("Kenya", "KE");
		countriesMap.put("Kyrgyzstan", "KG");
		countriesMap.put("Cambodia", "KH");
		countriesMap.put("Kiribati", "KI");
		countriesMap.put("Saint Kitts and Nevis", "KN");
		countriesMap.put("Korea (the Republic of)", "KR");
		countriesMap.put("Kuwait", "KW");
		countriesMap.put("Cayman Islands", "KY");
		countriesMap.put("Kazakhstan", "KZ");
		countriesMap.put("Lebanon", "LB");
		countriesMap.put("Saint Lucia", "LC");
		countriesMap.put("Liechtenstein", "LI");
		countriesMap.put("Sri Lanka", "LK");
		countriesMap.put("TJK", "TJ");
		countriesMap.put("YUG", "YU");
		countriesMap.put("Andorra", "AD");
		countriesMap.put("Afghanistan", "AF");
		countriesMap.put("Argentina", "AR");
		countriesMap.put("Åland Islands", "AX");
		countriesMap.put("Belgium", "BE");
		countriesMap.put("Saint Barthélemy", "BL");
		countriesMap.put("Bonaire, Sint Eustatius and Saba", "BQ");
		countriesMap.put("Botswana", "BW");
		countriesMap.put("Congo, the Democratic Republic of the", "CD");
		countriesMap.put("Côte d''Ivoire", "CI");
		countriesMap.put("Cabo Verde", "CV");
		countriesMap.put("Curaçao", "CW");
		countriesMap.put("Dominican Republic", "DO");
		countriesMap.put("Fiji", "FJ");
		countriesMap.put("Micronesia, Federated  of", "FM");
		countriesMap.put("Guernsey", "GG");
		countriesMap.put("Guadeloupe", "GP");
		countriesMap.put("South Georgia and the South Sandwich Islands", "GS");
		countriesMap.put("Guinea-Bissau", "GW");
		countriesMap.put("Heard Island and McDonald Islands", "HM");
		countriesMap.put("British Indian Ocean Territory", "IO");
		countriesMap.put("Comoros", "KM");
		countriesMap.put("Korea (the Democratic People''s Republic of)", "KP");
		countriesMap.put("Lao People''s Democratic Republic", "LA");
		countriesMap.put("Liberia", "LR");
		countriesMap.put("Lesotho", "LS");
		countriesMap.put("Lithuania", "LT");
		countriesMap.put("Luxembourg", "LU");
		countriesMap.put("Latvia", "LV");
		countriesMap.put("Libya", "LY");
		countriesMap.put("Morocco", "MA");
		countriesMap.put("Monaco", "MC");
		countriesMap.put("Moldova", "MD");
		countriesMap.put("Montenegro", "ME");
		countriesMap.put("Saint Martin (French part)", "MF");
		countriesMap.put("Madagascar", "MG");
		countriesMap.put("Marshall Islands", "MH");
		countriesMap.put("Macedonia, the former Yugoslav Republic of", "MK");
		countriesMap.put("Mali", "ML");
		countriesMap.put("Myanmar", "MM");
		countriesMap.put("Mongolia", "MN");
		countriesMap.put("Macao", "MO");
		countriesMap.put("Northern Mariana Islands", "MP");
		countriesMap.put("Martinique", "MQ");
		countriesMap.put("Mauritania", "MR");
		countriesMap.put("Montserrat", "MS");
		countriesMap.put("Malta", "MT");
		countriesMap.put("Mauritius", "MU");
		countriesMap.put("Maldives", "MV");
		countriesMap.put("Malawi", "MW");
		countriesMap.put("Mexico", "MX");
		countriesMap.put("Malaysia", "MY");
		countriesMap.put("Mozambique", "MZ");
		countriesMap.put("Namibia", "NA");
		countriesMap.put("New Caledonia", "NC");
		countriesMap.put("Niger", "NE");
		countriesMap.put("Norfolk Island", "NF");
		countriesMap.put("Nigeria", "NG");
		countriesMap.put("Nicaragua", "NI");
		countriesMap.put("Netherlands", "NL");
		countriesMap.put("Norway", "NO");
		countriesMap.put("Nepal", "NP");
		countriesMap.put("Nauru", "NR");
		countriesMap.put("Niue", "NU");
		countriesMap.put("New Zealand", "NZ");
		countriesMap.put("Oman", "OM");
		countriesMap.put("Panama", "PA");
		countriesMap.put("Peru", "PE");
		countriesMap.put("French Polynesia", "PF");
		countriesMap.put("Papua New Guinea", "PG");
		countriesMap.put("Philippines", "PH");
		countriesMap.put("Pakistan", "PK");
		countriesMap.put("Poland", "PL");
		countriesMap.put("Saint Pierre and Miquelon", "PM");
		countriesMap.put("Pitcairn", "PN");
		countriesMap.put("Puerto Rico", "PR");
		countriesMap.put("Palestine, State of", "PS");
		countriesMap.put("Portugal", "PT");
		countriesMap.put("Palau", "PW");
		countriesMap.put("Paraguay", "PY");
		countriesMap.put("Qatar", "QA");
		countriesMap.put("Réunion", "RE");
		countriesMap.put("Romania", "RO");
		countriesMap.put("Serbia", "RS");
		countriesMap.put("Russian Federation", "RU");
		countriesMap.put("Rwanda", "RW");
		countriesMap.put("Saudi Arabia", "SA");
		countriesMap.put("Solomon Islands", "SB");
		countriesMap.put("Seychelles", "SC");
		countriesMap.put("Sudan", "SD");
		countriesMap.put("Sweden", "SE");
		countriesMap.put("Singapore", "SG");
		countriesMap.put("Saint Helena, Ascension and Tristan da Cunha", "SH");
		countriesMap.put("Slovenia", "SI");
		countriesMap.put("Svalbard and Jan Mayen", "SJ");
		countriesMap.put("Slovakia", "SK");
		countriesMap.put("Sierra Leone", "SL");
		countriesMap.put("San Marino", "SM");
		countriesMap.put("Senegal", "SN");
		countriesMap.put("Somalia", "SO");
		countriesMap.put("Suriname", "SR");
		countriesMap.put("South Sudan", "SS");
		countriesMap.put("Sao Tome and Principe", "ST");
		countriesMap.put("El Salvador", "SV");
		countriesMap.put("Sint Maarten (Dutch part)", "SX");
		countriesMap.put("Syrian Arab Republic", "SY");
		countriesMap.put("Swaziland", "SZ");
		countriesMap.put("Turks and Caicos Islands", "TC");
		countriesMap.put("Chad", "TD");
		countriesMap.put("French Southern Territories", "TF");
		countriesMap.put("Togo", "TG");
		countriesMap.put("Thailand", "TH");
		countriesMap.put("Tokelau", "TK");
		countriesMap.put("Timor-Leste", "TL");
		countriesMap.put("Turkmenistan", "TM");
		countriesMap.put("Tunisia", "TN");
		countriesMap.put("Tonga", "TO");
		countriesMap.put("Turkey", "TR");
		countriesMap.put("Trinidad and Tobago", "TT");
		countriesMap.put("Tuvalu", "TV");
		countriesMap.put("Taiwan", "TW");
		countriesMap.put("Tanzania, United Republic of", "TZ");
		countriesMap.put("Ukraine", "UA");
		countriesMap.put("Uganda", "UG");
		countriesMap.put("United  Minor Outlying Islands", "UM");
		countriesMap.put("United", "US");
		countriesMap.put("Uruguay", "UY");
		countriesMap.put("Uzbekistan", "UZ");
		countriesMap.put("Holy See (Vatican City State)", "VA");
		countriesMap.put("Saint Vincent and the Grenadines", "VC");
		countriesMap.put("Venezuela, Bolivarian Republic of", "VE");
		countriesMap.put("Virgin Islands, British", "VG");
		countriesMap.put("Virgin Islands, U.S.", "VI");
		countriesMap.put("Viet Nam", "VN");
		countriesMap.put("Vanuatu", "VU");
		countriesMap.put("Wallis and Futuna", "WF");
		countriesMap.put("Samoa", "WS");
		countriesMap.put("Yemen", "YE");
		countriesMap.put("Mayotte", "YT");
		countriesMap.put("South Africa", "ZA");
		countriesMap.put("Zambia", "ZM");
		countriesMap.put("Zimbabwe", "ZW");

		final List<Countries> countries = new ArrayList<>();
		for (final Map.Entry<String, String> entry : countriesMap.entrySet())
		{
			countries.add(
				Countries.builder().name(entry.getKey()).iso3166a2name(entry.getValue()).build());
		}
		Collections.sort(countries, Comparator.comparing(Countries::getName));
		return countries;
	}

	/**
	 * Factory method for create an initial {@link List} of {@link Countries} objects.
	 *
	 * @return the created {@link List} with the {@link Countries} objects.
	 */
	public static List<Countries> newAvailableCountries()
	{
		final Map<String, String> countriesMap = new LinkedHashMap<>();
		countriesMap.put("AE", "United Arab Emirates");
		countriesMap.put("JO", "Jordan");
		countriesMap.put("SY", "Syria");
		countriesMap.put("HR", "Croatia");
		countriesMap.put("BE", "Belgium");
		countriesMap.put("PA", "Panama");
		countriesMap.put("MT", "Malta");
		countriesMap.put("VE", "Venezuela");
		countriesMap.put("TW", "Taiwan");
		countriesMap.put("DK", "Denmark");
		countriesMap.put("PR", "Puerto Rico");
		countriesMap.put("VN", "Vietnam");
		countriesMap.put("US", "United States");
		countriesMap.put("ME", "Montenegro");
		countriesMap.put("SE", "Sweden");
		countriesMap.put("BO", "Bolivia");
		countriesMap.put("SG", "Singapore");
		countriesMap.put("BH", "Bahrain");
		countriesMap.put("SA", "Saudi Arabia");
		countriesMap.put("YE", "Yemen");
		countriesMap.put("IN", "India");
		countriesMap.put("MT", "Malta");
		countriesMap.put("FI", "Finland");
		countriesMap.put("BA", "Bosnia and Herzegovina");
		countriesMap.put("UA", "Ukraine");
		countriesMap.put("CH", "Switzerland");
		countriesMap.put("AR", "Argentina");
		countriesMap.put("EG", "Egypt");
		countriesMap.put("JP", "Japan");
		countriesMap.put("SV", "El Salvador");
		countriesMap.put("BR", "Brazil");
		countriesMap.put("IS", "Iceland");
		countriesMap.put("CZ", "Czech Republic");
		countriesMap.put("PL", "Poland");
		countriesMap.put("ES", "Spain");
		countriesMap.put("MY", "Malaysia");
		countriesMap.put("ES", "Spain");
		countriesMap.put("CO", "Colombia");
		countriesMap.put("BG", "Bulgaria");
		countriesMap.put("BA", "Bosnia and Herzegovina");
		countriesMap.put("PY", "Paraguay");
		countriesMap.put("EC", "Ecuador");
		countriesMap.put("US", "United States");
		countriesMap.put("SD", "Sudan");
		countriesMap.put("RO", "Romania");
		countriesMap.put("PH", "Philippines");
		countriesMap.put("TN", "Tunisia");
		countriesMap.put("ME", "Montenegro");
		countriesMap.put("GT", "Guatemala");
		countriesMap.put("KR", "South Korea");
		countriesMap.put("CY", "Cyprus");
		countriesMap.put("MX", "Mexico");
		countriesMap.put("RU", "Russia");
		countriesMap.put("HN", "Honduras");
		countriesMap.put("HK", "Hong Kong");
		countriesMap.put("NO", "Norway");
		countriesMap.put("HU", "Hungary");
		countriesMap.put("TH", "Thailand");
		countriesMap.put("IQ", "Iraq");
		countriesMap.put("CL", "Chile");
		countriesMap.put("MA", "Morocco");
		countriesMap.put("IE", "Ireland");
		countriesMap.put("TR", "Turkey");
		countriesMap.put("EE", "Estonia");
		countriesMap.put("QA", "Qatar");
		countriesMap.put("PT", "Portugal");
		countriesMap.put("LU", "Luxembourg");
		countriesMap.put("OM", "Oman");
		countriesMap.put("AL", "Albania");
		countriesMap.put("DO", "Dominican Republic");
		countriesMap.put("CU", "Cuba");
		countriesMap.put("NZ", "New Zealand");
		countriesMap.put("RS", "Serbia");
		countriesMap.put("CH", "Switzerland");
		countriesMap.put("UY", "Uruguay");
		countriesMap.put("GR", "Greece");
		countriesMap.put("IL", "Israel");
		countriesMap.put("ZA", "South Africa");
		countriesMap.put("TH", "Thailand");
		countriesMap.put("FR", "France");
		countriesMap.put("AT", "Austria");
		countriesMap.put("NO", "Norway");
		countriesMap.put("AU", "Australia");
		countriesMap.put("NL", "Netherlands");
		countriesMap.put("CA", "Canada");
		countriesMap.put("LV", "Latvia");
		countriesMap.put("LU", "Luxembourg");
		countriesMap.put("CR", "Costa Rica");
		countriesMap.put("KW", "Kuwait");
		countriesMap.put("LY", "Libya");
		countriesMap.put("CH", "Switzerland");
		countriesMap.put("DE", "Germany");
		countriesMap.put("DZ", "Algeria");
		countriesMap.put("SK", "Slovakia");
		countriesMap.put("LT", "Lithuania");
		countriesMap.put("IT", "Italy");
		countriesMap.put("IE", "Ireland");
		countriesMap.put("SG", "Singapore");
		countriesMap.put("CA", "Canada");
		countriesMap.put("BE", "Belgium");
		countriesMap.put("CN", "China");
		countriesMap.put("JP", "Japan");
		countriesMap.put("GR", "Greece");
		countriesMap.put("RS", "Serbia");
		countriesMap.put("IN", "India");
		countriesMap.put("LB", "Lebanon");
		countriesMap.put("NI", "Nicaragua");
		countriesMap.put("MK", "Macedonia");
		countriesMap.put("BY", "Belarus");
		countriesMap.put("SI", "Slovenia");
		countriesMap.put("PE", "Peru");
		countriesMap.put("ID", "Indonesia");
		countriesMap.put("GB", "United Kingdom");

		final List<Countries> countries = new ArrayList<>();
		for (final Map.Entry<String, String> entry : countriesMap.entrySet())
		{
			countries.add(
				Countries.builder().name(entry.getValue()).iso3166a2name(entry.getKey()).build());
		}
		Collections.sort(countries, Comparator.comparing(Countries::getName));
		return countries;
	}

	/**
	 * Factory method for create an initial {@link List} of {@link Languages} objects.
	 *
	 * @return the created {@link List} with the {@link Languages} objects.
	 */
	public static List<Languages> newLanguages()
	{
		final Map<String, String> languagesMap = new LinkedHashMap<>();
		languagesMap.put("ab", "Abkhaz");
		languagesMap.put("aa", "Afar");
		languagesMap.put("af", "Afrikaans");
		languagesMap.put("ak", "Akan");
		languagesMap.put("sq", "Albanian");
		languagesMap.put("am", "Amharic");
		languagesMap.put("ar", "Arabic");
		languagesMap.put("an", "Aragonese");
		languagesMap.put("hy", "Armenian");
		languagesMap.put("as", "Assamese");
		languagesMap.put("av", "Avaric");
		languagesMap.put("ae", "Avestan");
		languagesMap.put("ay", "Aymara");
		languagesMap.put("az", "Azerbaijani");
		languagesMap.put("bm", "Bambara");
		languagesMap.put("ba", "Bashkir");
		languagesMap.put("eu", "Basque");
		languagesMap.put("be", "Belarusian");
		languagesMap.put("bn", "Bengali, Bangla");
		languagesMap.put("bh", "Bihari");
		languagesMap.put("bi", "Bislama");
		languagesMap.put("bs", "Bosnian");
		languagesMap.put("br", "Breton");
		languagesMap.put("bg", "Bulgarian");
		languagesMap.put("my", "Burmese");
		languagesMap.put("ca", "Catalan");
		languagesMap.put("ch", "Chamorro");
		languagesMap.put("ce", "Chechen");
		languagesMap.put("ny", "Chichewa, Chewa, Nyanja");
		languagesMap.put("zh", "Chinese");
		languagesMap.put("cv", "Chuvash");
		languagesMap.put("kw", "Cornish");
		languagesMap.put("co", "Corsican");
		languagesMap.put("cr", "Cree");
		languagesMap.put("hr", "Croatian");
		languagesMap.put("cs", "Czech");
		languagesMap.put("da", "Danish");
		languagesMap.put("dv", "Divehi, Dhivehi, Maldivian");
		languagesMap.put("nl", "Dutch");
		languagesMap.put("dz", "Dzongkha");
		languagesMap.put("en", "English");
		languagesMap.put("eo", "Esperanto");
		languagesMap.put("et", "Estonian");
		languagesMap.put("ee", "Ewe");
		languagesMap.put("fo", "Faroese");
		languagesMap.put("fj", "Fijian");
		languagesMap.put("fi", "Finnish");
		languagesMap.put("fr", "French");
		languagesMap.put("ff", "Fula, Fulah, Pulaar, Pular");
		languagesMap.put("gl", "Galician");
		languagesMap.put("ka", "Georgian");
		languagesMap.put("de", "German");
		languagesMap.put("el", "Greek (modern)");
		languagesMap.put("gn", "Guaraní");
		languagesMap.put("gu", "Gujarati");
		languagesMap.put("ht", "Haitian, Haitian Creole");
		languagesMap.put("ha", "Hausa");
		languagesMap.put("he", "Hebrew (modern)");
		languagesMap.put("hz", "Herero");
		languagesMap.put("hi", "Hindi");
		languagesMap.put("ho", "Hiri Motu");
		languagesMap.put("hu", "Hungarian");
		languagesMap.put("ia", "Interlingua");
		languagesMap.put("id", "Indonesian");
		languagesMap.put("ie", "Interlingue");
		languagesMap.put("ga", "Irish");
		languagesMap.put("ig", "Igbo");
		languagesMap.put("ik", "Inupiaq");
		languagesMap.put("io", "Ido");
		languagesMap.put("is", "Icelandic");
		languagesMap.put("it", "Italian");
		languagesMap.put("iu", "Inuktitut");
		languagesMap.put("ja", "Japanese");
		languagesMap.put("jv", "Javanese");
		languagesMap.put("kl", "Kalaallisut, Greenlandic");
		languagesMap.put("kn", "Kannada");
		languagesMap.put("kr", "Kanuri");
		languagesMap.put("ks", "Kashmiri");
		languagesMap.put("kk", "Kazakh");
		languagesMap.put("km", "Khmer");
		languagesMap.put("ki", "Kikuyu, Gikuyu");
		languagesMap.put("rw", "Kinyarwanda");
		languagesMap.put("ky", "Kyrgyz");
		languagesMap.put("kv", "Komi");
		languagesMap.put("kg", "Kongo");
		languagesMap.put("ko", "Korean");
		languagesMap.put("ku", "Kurdish");
		languagesMap.put("kj", "Kwanyama, Kuanyama");
		languagesMap.put("la", "Latin");
		languagesMap.put("lb", "Luxembourgish, Letzeburgesch");
		languagesMap.put("lg", "Ganda");
		languagesMap.put("li", "Limburgish, Limburgan, Limburger");
		languagesMap.put("ln", "Lingala");
		languagesMap.put("lo", "Lao");
		languagesMap.put("lt", "Lithuanian");
		languagesMap.put("lu", "Luba-Katanga");
		languagesMap.put("lv", "Latvian");
		languagesMap.put("gv", "Manx");
		languagesMap.put("mk", "Macedonian");
		languagesMap.put("mg", "Malagasy");
		languagesMap.put("ms", "Malay");
		languagesMap.put("ml", "Malayalam");
		languagesMap.put("mt", "Maltese");
		languagesMap.put("mi", "M?ori");
		languagesMap.put("mr", "Marathi");
		languagesMap.put("mh", "Marshallese");
		languagesMap.put("mn", "Mongolian");
		languagesMap.put("na", "Nauruan");
		languagesMap.put("nv", "Navajo, Navaho");
		languagesMap.put("nd", "Northern Ndebele");
		languagesMap.put("ne", "Nepali");
		languagesMap.put("ng", "Ndonga");
		languagesMap.put("nb", "Norwegian Bokmål");
		languagesMap.put("nn", "Norwegian Nynorsk");
		languagesMap.put("no", "Norwegian");
		languagesMap.put("ii", "Nuosu");
		languagesMap.put("nr", "Southern Ndebele");
		languagesMap.put("oc", "Occitan");
		languagesMap.put("oj", "Ojibwe, Ojibwa");
		languagesMap.put("cu", "Old Church Slavonic, Church Slavonic, Old Bulgarian");
		languagesMap.put("om", "Oromo");
		languagesMap.put("or", "Oriya");
		languagesMap.put("os", "Ossetian, Ossetic");
		languagesMap.put("pa", "Panjabi, Punjabi");
		languagesMap.put("pi", "P?li");
		languagesMap.put("fa", "Persian (Farsi)");
		languagesMap.put("pl", "Polish");
		languagesMap.put("ps", "Pashto, Pushto");
		languagesMap.put("pt", "Portuguese");
		languagesMap.put("qu", "Quechua");
		languagesMap.put("rm", "Romansh");
		languagesMap.put("rn", "Kirundi");
		languagesMap.put("rc", "Reunionese, Reunion Creole");
		languagesMap.put("ro", "Romanian");
		languagesMap.put("ru", "Russian");
		languagesMap.put("sa", "Sanskrit");
		languagesMap.put("sc", "Sardinian");
		languagesMap.put("sd", "Sindhi");
		languagesMap.put("se", "Northern Sami");
		languagesMap.put("sm", "Samoan");
		languagesMap.put("sg", "Sango");
		languagesMap.put("sr", "Serbian");
		languagesMap.put("gd", "Scottish Gaelic, Gaelic");
		languagesMap.put("sn", "Shona");
		languagesMap.put("si", "Sinhalese, Sinhala");
		languagesMap.put("sk", "Slovak");
		languagesMap.put("sl", "Slovene");
		languagesMap.put("so", "Somali");
		languagesMap.put("st", "Southern Sotho");
		languagesMap.put("es", "Spanish");
		languagesMap.put("su", "Sundanese");
		languagesMap.put("sw", "Swahili");
		languagesMap.put("ss", "Swati");
		languagesMap.put("sv", "Swedish");
		languagesMap.put("ta", "Tamil");
		languagesMap.put("te", "Telugu");
		languagesMap.put("tg", "Tajik");
		languagesMap.put("th", "Thai");
		languagesMap.put("ti", "Tigrinya");
		languagesMap.put("bo", "Tibetan Standard, Tibetan, Central");
		languagesMap.put("tk", "Turkmen");
		languagesMap.put("tl", "Tagalog");
		languagesMap.put("tn", "Tswana");
		languagesMap.put("to", "Tonga (Tonga Islands)");
		languagesMap.put("tr", "Turkish");
		languagesMap.put("ts", "Tsonga");
		languagesMap.put("tt", "Tatar");
		languagesMap.put("tw", "Twi");
		languagesMap.put("ty", "Tahitian");
		languagesMap.put("ug", "Uyghur");
		languagesMap.put("uk", "Ukrainian");
		languagesMap.put("ur", "Urdu");
		languagesMap.put("uz", "Uzbek");
		languagesMap.put("ve", "Venda");
		languagesMap.put("vi", "Vietnamese");
		languagesMap.put("vo", "Volapük");
		languagesMap.put("wa", "Walloon");
		languagesMap.put("cy", "Welsh");
		languagesMap.put("wo", "Wolof");
		languagesMap.put("fy", "Western Frisian");
		languagesMap.put("xh", "Xhosa");
		languagesMap.put("yi", "Yiddish");
		languagesMap.put("yo", "Yoruba");
		languagesMap.put("za", "Zhuang, Chuang");
		languagesMap.put("zu", "Zulu");

		final List<Languages> languages = new ArrayList<>();
		for (final Map.Entry<String, String> entry : languagesMap.entrySet())
		{
			languages.add(
				Languages.builder().name(entry.getValue()).iso639Dash1(entry.getKey()).build());
		}
		Collections.sort(languages, Comparator.comparing(Languages::getName));
		return languages;
	}

	/**
	 * Factory method for create an initial {@link List} of {@link LanguageLocales} objects.
	 *
	 * @return the created {@link List} with the {@link LanguageLocales} objects.
	 */
	public static List<LanguageLocales> newLanguageLocales()
	{
		final List<LanguageLocales> languageLocales = new ArrayList<>();
		languageLocales.add(LanguageLocales.builder().locale("ar").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_AE").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_BH").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_DZ").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_EG").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_IQ").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_JO").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_KW").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_LB").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_LY").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_MA").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_OM").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_QA").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_SA").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_SD").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_SY").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_TN").build());
		languageLocales.add(LanguageLocales.builder().locale("ar_YE").build());
		languageLocales.add(LanguageLocales.builder().locale("be").build());
		languageLocales.add(LanguageLocales.builder().locale("be_BY").build());
		languageLocales.add(LanguageLocales.builder().locale("bg").build());
		languageLocales.add(LanguageLocales.builder().locale("bg_BG").build());
		languageLocales.add(LanguageLocales.builder().locale("ca").build());
		languageLocales.add(LanguageLocales.builder().locale("ca_ES").build());
		languageLocales.add(LanguageLocales.builder().locale("cs").build());
		languageLocales.add(LanguageLocales.builder().locale("cs_CZ").build());
		languageLocales.add(LanguageLocales.builder().locale("da").build());
		languageLocales.add(LanguageLocales.builder().locale("da_DK").build());
		languageLocales.add(LanguageLocales.builder().locale("de").build());
		languageLocales.add(LanguageLocales.builder().locale("de_AT").build());
		languageLocales.add(LanguageLocales.builder().locale("de_CH").build());
		languageLocales.add(LanguageLocales.builder().locale("de_DE").build());
		languageLocales.add(LanguageLocales.builder().locale("de_GR").build());
		languageLocales.add(LanguageLocales.builder().locale("de_LU").build());
		languageLocales.add(LanguageLocales.builder().locale("el").build());
		languageLocales.add(LanguageLocales.builder().locale("el_CY").build());
		languageLocales.add(LanguageLocales.builder().locale("el_GR").build());
		languageLocales.add(LanguageLocales.builder().locale("en").build());
		languageLocales.add(LanguageLocales.builder().locale("en_AU").build());
		languageLocales.add(LanguageLocales.builder().locale("en_CA").build());
		languageLocales.add(LanguageLocales.builder().locale("en_GB").build());
		languageLocales.add(LanguageLocales.builder().locale("en_IE").build());
		languageLocales.add(LanguageLocales.builder().locale("en_IN").build());
		languageLocales.add(LanguageLocales.builder().locale("en_MT").build());
		languageLocales.add(LanguageLocales.builder().locale("en_NZ").build());
		languageLocales.add(LanguageLocales.builder().locale("en_PH").build());
		languageLocales.add(LanguageLocales.builder().locale("en_SG").build());
		languageLocales.add(LanguageLocales.builder().locale("en_US").build());
		languageLocales.add(LanguageLocales.builder().locale("en_ZA").build());
		languageLocales.add(LanguageLocales.builder().locale("es").build());
		languageLocales.add(LanguageLocales.builder().locale("es_AR").build());
		languageLocales.add(LanguageLocales.builder().locale("es_BO").build());
		languageLocales.add(LanguageLocales.builder().locale("es_CL").build());
		languageLocales.add(LanguageLocales.builder().locale("es_CO").build());
		languageLocales.add(LanguageLocales.builder().locale("es_CR").build());
		languageLocales.add(LanguageLocales.builder().locale("es_CU").build());
		languageLocales.add(LanguageLocales.builder().locale("es_DO").build());
		languageLocales.add(LanguageLocales.builder().locale("es_EC").build());
		languageLocales.add(LanguageLocales.builder().locale("es_ES").build());
		languageLocales.add(LanguageLocales.builder().locale("es_GT").build());
		languageLocales.add(LanguageLocales.builder().locale("es_HN").build());
		languageLocales.add(LanguageLocales.builder().locale("es_MX").build());
		languageLocales.add(LanguageLocales.builder().locale("es_NI").build());
		languageLocales.add(LanguageLocales.builder().locale("es_PA").build());
		languageLocales.add(LanguageLocales.builder().locale("es_PE").build());
		languageLocales.add(LanguageLocales.builder().locale("es_PR").build());
		languageLocales.add(LanguageLocales.builder().locale("es_PY").build());
		languageLocales.add(LanguageLocales.builder().locale("es_SV").build());
		languageLocales.add(LanguageLocales.builder().locale("es_US").build());
		languageLocales.add(LanguageLocales.builder().locale("es_UY").build());
		languageLocales.add(LanguageLocales.builder().locale("es_VE").build());
		languageLocales.add(LanguageLocales.builder().locale("et").build());
		languageLocales.add(LanguageLocales.builder().locale("et_EE").build());
		languageLocales.add(LanguageLocales.builder().locale("fi").build());
		languageLocales.add(LanguageLocales.builder().locale("fi_FI").build());
		languageLocales.add(LanguageLocales.builder().locale("fr").build());
		languageLocales.add(LanguageLocales.builder().locale("fr_BE").build());
		languageLocales.add(LanguageLocales.builder().locale("fr_CA").build());
		languageLocales.add(LanguageLocales.builder().locale("fr_CH").build());
		languageLocales.add(LanguageLocales.builder().locale("fr_FR").build());
		languageLocales.add(LanguageLocales.builder().locale("fr_LU").build());
		languageLocales.add(LanguageLocales.builder().locale("ga").build());
		languageLocales.add(LanguageLocales.builder().locale("ga_IE").build());
		languageLocales.add(LanguageLocales.builder().locale("hi").build());
		languageLocales.add(LanguageLocales.builder().locale("hi_IN").build());
		languageLocales.add(LanguageLocales.builder().locale("hr").build());
		languageLocales.add(LanguageLocales.builder().locale("hr_HR").build());
		languageLocales.add(LanguageLocales.builder().locale("hu").build());
		languageLocales.add(LanguageLocales.builder().locale("hu_HU").build());
		languageLocales.add(LanguageLocales.builder().locale("in").build());
		languageLocales.add(LanguageLocales.builder().locale("in_ID").build());
		languageLocales.add(LanguageLocales.builder().locale("is").build());
		languageLocales.add(LanguageLocales.builder().locale("is_IS").build());
		languageLocales.add(LanguageLocales.builder().locale("it").build());
		languageLocales.add(LanguageLocales.builder().locale("it_CH").build());
		languageLocales.add(LanguageLocales.builder().locale("it_IT").build());
		languageLocales.add(LanguageLocales.builder().locale("iw").build());
		languageLocales.add(LanguageLocales.builder().locale("iw_IL").build());
		languageLocales.add(LanguageLocales.builder().locale("ja").build());
		languageLocales.add(LanguageLocales.builder().locale("ja_JP").build());
		languageLocales.add(LanguageLocales.builder().locale("ja_JP_JP").build());
		languageLocales.add(LanguageLocales.builder().locale("ko").build());
		languageLocales.add(LanguageLocales.builder().locale("ko_KR").build());
		languageLocales.add(LanguageLocales.builder().locale("lt").build());
		languageLocales.add(LanguageLocales.builder().locale("lt_LT").build());
		languageLocales.add(LanguageLocales.builder().locale("lv").build());
		languageLocales.add(LanguageLocales.builder().locale("lv_LV").build());
		languageLocales.add(LanguageLocales.builder().locale("mk").build());
		languageLocales.add(LanguageLocales.builder().locale("mk_MK").build());
		languageLocales.add(LanguageLocales.builder().locale("ms").build());
		languageLocales.add(LanguageLocales.builder().locale("ms_MY").build());
		languageLocales.add(LanguageLocales.builder().locale("mt").build());
		languageLocales.add(LanguageLocales.builder().locale("mt_MT").build());
		languageLocales.add(LanguageLocales.builder().locale("nl").build());
		languageLocales.add(LanguageLocales.builder().locale("nl_BE").build());
		languageLocales.add(LanguageLocales.builder().locale("nl_NL").build());
		languageLocales.add(LanguageLocales.builder().locale("no").build());
		languageLocales.add(LanguageLocales.builder().locale("no_NO").build());
		languageLocales.add(LanguageLocales.builder().locale("no_NO_NY").build());
		languageLocales.add(LanguageLocales.builder().locale("pl").build());
		languageLocales.add(LanguageLocales.builder().locale("pl_PL").build());
		languageLocales.add(LanguageLocales.builder().locale("pt").build());
		languageLocales.add(LanguageLocales.builder().locale("pt_BR").build());
		languageLocales.add(LanguageLocales.builder().locale("pt_PT").build());
		languageLocales.add(LanguageLocales.builder().locale("ro").build());
		languageLocales.add(LanguageLocales.builder().locale("ro_RO").build());
		languageLocales.add(LanguageLocales.builder().locale("ru").build());
		languageLocales.add(LanguageLocales.builder().locale("ru_RU").build());
		languageLocales.add(LanguageLocales.builder().locale("sk").build());
		languageLocales.add(LanguageLocales.builder().locale("sk_SK").build());
		languageLocales.add(LanguageLocales.builder().locale("sl").build());
		languageLocales.add(LanguageLocales.builder().locale("sl_SI").build());
		languageLocales.add(LanguageLocales.builder().locale("sq").build());
		languageLocales.add(LanguageLocales.builder().locale("sq_AL").build());
		languageLocales.add(LanguageLocales.builder().locale("sr").build());
		languageLocales.add(LanguageLocales.builder().locale("sr_BA").build());
		languageLocales.add(LanguageLocales.builder().locale("sr_CS").build());
		languageLocales.add(LanguageLocales.builder().locale("sr_ME").build());
		languageLocales.add(LanguageLocales.builder().locale("sr_RS").build());
		languageLocales.add(LanguageLocales.builder().locale("sv").build());
		languageLocales.add(LanguageLocales.builder().locale("sv_SE").build());
		languageLocales.add(LanguageLocales.builder().locale("th").build());
		languageLocales.add(LanguageLocales.builder().locale("th_TH").build());
		languageLocales.add(LanguageLocales.builder().locale("th_TH_TH").build());
		languageLocales.add(LanguageLocales.builder().locale("tr").build());
		languageLocales.add(LanguageLocales.builder().locale("tr_TR").build());
		languageLocales.add(LanguageLocales.builder().locale("uk").build());
		languageLocales.add(LanguageLocales.builder().locale("uk_UA").build());
		languageLocales.add(LanguageLocales.builder().locale("vi").build());
		languageLocales.add(LanguageLocales.builder().locale("vi_VN").build());
		languageLocales.add(LanguageLocales.builder().locale("zh").build());
		languageLocales.add(LanguageLocales.builder().locale("zh_CN").build());
		languageLocales.add(LanguageLocales.builder().locale("zh_HK").build());
		languageLocales.add(LanguageLocales.builder().locale("zh_SG").build());
		languageLocales.add(LanguageLocales.builder().locale("zh_TW").build());

		Collections.sort(languageLocales, Comparator.comparing(LanguageLocales::getLocale));
		return languageLocales;
	}

	/**
	 * Factory method for create an initial {@link List} of the available {@link LanguageLocales}
	 * objects of the current system.
	 *
	 * @return the created {@link List} with the available {@link LanguageLocales} objects of the
	 *         current system.
	 */
	public static List<LanguageLocales> newAvailableLanguageLocales()
	{
		final List<LanguageLocales> languageLocales = ListExtensions.newArrayList();
		List<Locale> availableLocales = LocaleResolver.getAvailableLocales();
		for (Locale locale : availableLocales)
		{
			String localeFilenameSuffix = LocaleExtensions.getLocaleFilenameSuffix(locale);
			if(localeFilenameSuffix!= null && !localeFilenameSuffix.isEmpty()) {
				languageLocales.add(LanguageLocales.builder().locale(localeFilenameSuffix).build());
			}
		}
		Collections.sort(languageLocales, Comparator.comparing(LanguageLocales::getLocale));
		return languageLocales;
	}
}
