
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:$gradlePluginLombokVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootGradlePluginVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$springGradlePluginDependencyManagementVersion"
        classpath "com.github.ben-manes:gradle-versions-plugin:$gradlePluginVersionsVersion"
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:$licenseGradlePluginVersion"
        classpath "net.ltgt.gradle:gradle-apt-plugin:$gradleAptPluginVersion"
        classpath "com.bmuschko:gradle-izpack-plugin:$gradleIzpackPluginVersion"
    }
}

apply plugin: "io.freefair.lombok"
apply plugin: "java"
apply plugin: "com.bmuschko.izpack"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "java-library"
apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "com.github.ben-manes.versions"
apply plugin: "com.github.hierynomus.license"
apply plugin: "jacoco"

group = "$groupPackage"
version = "$projectVersion"
description = "$rootProject.name"
sourceCompatibility = "$projectSourceCompatibility"

repositories {
    mavenLocal()
    mavenCentral()
}

izpack {
    baseDir = file("$buildDir")
    installFile = file("src/main/izpack/install.xml")
    outputFile = file("$buildDir/distributions/$rootProject.name-${projectVersion}-installer.jar")
    compression = "deflate"
    compressionLevel = 9
    appProperties = ["app.group": "$groupPackage",
                     "app.name": "$rootProject.name",
                     "app.title": "$rootProject.name",
                     "app.version": "$projectVersion",
                     "app.subpath": "$rootProject.name-${projectVersion}"]
}

license {
    ext.year="2015"
    ext.owner="Asterios Raptis"
    header rootProject.file("src/main/resources/LICENSE.txt")
    excludes(["**/README",
              "**/README.md",
              "**/LICENSE",
              "**/NOTICE",
              "**/*.xml",
              "**/*.xsl",
              "**/*.xsd",
              "**/*.dtd",
              "**/*.html",
              "**/*.jsp",
              "**/*.jpa",
              "**/*.sql",
              "**/*.properties",
              "**/*.bat",
              "**/*.gradle",
              "**/*.MF",
              "**/*.txt",
              "**/*.vm",
              "**/*.log",
              "**/*.map",
              "**/*.js.map",
              "**/*.tmpl",
              "**/*.js.tmpl",
              "**/*.editorconfig",
              "**/*.lombok.config",
              "src/test/resources/**",
              "src/main/resources/**",
              "out/**",
              "build/**"])
}

// workhack for license issue #76
gradle.startParameter.excludedTaskNames += "licenseMain"
gradle.startParameter.excludedTaskNames += "licenseTest"

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from(sourceSets.main.allJava)
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set("javadoc")
    javadoc.properties.failOnError = true
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

test {
    useJUnitPlatform()
}

def releaseVersion = !version.endsWith("SNAPSHOT")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "$rootProject.name"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = "$rootProject.name"
                description = "$projectDescription"
                url = "$projectScmProviderUrl"+"$projectHolderUsername"+"/"+"$rootProject.name"
                organization {
                    name = "$projectOrganizationName"
                    url = "$projectOrganizationUrl"
                }
                issueManagement {
                    system = "$projectIssueManagementSystem"
                    url = "$projectScmProviderUrl"+"$projectHolderUsername"+"/"+"$rootProject.name"+"/issues"
                }
                licenses {
                    license {
                        name = "$projectLicenseName"
                        url = "$projectLicenseUrl"
                        distribution = "$projectLicenseDistribution"
                    }
                }
                developers {
                    developer {
                        id = "$projectHolderUsername"
                        name = "Asterios Raptis"
                    }
                }
                scm {
                    connection = "scm:git:git:@" + "$projectScmProviderDomain" + ":" + "$projectHolderUsername" + "/" + "$rootProject.name" + ".git"
                    developerConnection = "scm:git:git:@" + "$projectScmProviderDomain" + ":" + "$projectHolderUsername" + "/" + "$rootProject.name" + ".git"
                    url = "scm:git:git:@" + "$projectScmProviderDomain" + ":" + "$projectHolderUsername" + "/" + "$rootProject.name" + ".git"
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv("ossrhUsername") ?: project.property("ossrhUsername")
                password System.getenv("ossrhPassword") ?: project.property("ossrhPassword")
            }
            def releasesRepoUrl = "$projectRepositoriesReleasesRepoUrl"
            def snapshotsRepoUrl = "$projectRepositoriesSnapshotsRepoUrl"
            url = releaseVersion ? releasesRepoUrl : snapshotsRepoUrl
        }
    }
}

signing {
    if (releaseVersion) {
        sign publishing.publications.mavenJava
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport

dependencies {
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")

    implementation("de.alpharogroup:xml-extensions:$xmlExtensionsVersion")
    implementation("com.mashape.unirest:unirest-java:$unirestJavaVersion")
    implementation("org.apache.httpcomponents:httpclient:$httpclientVersion")
    implementation("org.apache.httpcomponents:httpasyncclient:$httpasyncclientVersion")
    implementation("org.apache.httpcomponents:httpmime:$httpclientVersion")
    implementation("org.json:json:$jsonVersion")
    implementation("de.alpharogroup:observer:$designPatternObserverVersion")
    implementation("de.alpharogroup:state:$designPatternStateVersion")
    implementation("de.alpharogroup:resourcebundle-inspector:$resourcebundleInspectorVersion")
    implementation("de.alpharogroup:silly-collections:$sillyCollectionsVersion")
    implementation("de.alpharogroup:resource-bundles-view-model:$viewModelVersion")
    implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    implementation("de.alpharogroup:json-extensions:$jsonExtensionsVersion")

    implementation("de.alpharogroup:model-object:$modelObjectVersion")
    implementation("de.alpharogroup:model-type-safe:$modelTypeSafeVersion")

    implementation("javax.help:javahelp:$javahelpVersion")
    implementation("com.google.guava:guava:$guavaVersion")

    implementation("de.alpharogroup:swing-components:$swingComponentsVersion")
    implementation("org.swinglabs:swing-layout:$swingLayoutVersion")
    implementation("org.swinglabs:jxlayer:$jxlayerVersion")
    implementation("org.swinglabs:swing-worker:$swingWorkerVersion")
    implementation("org.swinglabs.swingx:swingx-all:$swingxAllVersion")
    implementation("com.miglayout:miglayout-swing:$miglayoutSwingVersion")
    implementation("xml-apis:xml-apis:$xmlApisVersion")
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-integration")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}
